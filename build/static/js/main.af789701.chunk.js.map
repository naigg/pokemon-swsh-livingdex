{"version":3,"sources":["components/checkbox-input/index.js","components/pokedex-entry/index.js","components/pokedex-tracker/index.js","components/input-label/index.js","helpers/use-local-storage-hook.js","App.js","serviceWorker.js","index.js"],"names":["CheckboxInput","value","id","defaultChecked","onChangeHandler","className","data-value","type","onChange","React","memo","hidden","isCaught","inputHandler","dexNumber","dexName","dexTypes","labelId","e","target","attributes","htmlFor","map","key","PokedexTracker","data","filterType","searchQuery","currentCaughtPokemon","pokemon","includes","currentItemVisible","isSearchValid","InputLabel","Fragment","name","checked","style","textTransform","useLocalStorage","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","defaultCaughtPokemonObject","App","caughtPokemons","setCaughtPokemons","pokemonInputHandler","useCallback","currentNumber","currentNumberValue","tempCaughtPokemons","foundArrayIndex","indexOf","splice","setFilterType","setSearchQuery","onChangeFilterHandler","placeholder","pokdexJson","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af789701.chunk.js","sourcesContent":["import React from 'react';\n\nimport './checkbox-input.css';\n\nfunction CheckboxInput({ value, id, defaultChecked, onChangeHandler }) {\n  return (\n    <input\n      className=\"checkbox-input\"\n      data-value={value}\n      id={id}\n      defaultChecked={defaultChecked}\n      type=\"checkbox\"\n      onChange={onChangeHandler}\n    />\n  )\n}\n\nexport default CheckboxInput;\n","import React from \"react\";\n\nimport \"./pokedex-entry.css\";\n\nimport CheckboxInput from '../checkbox-input';\n\nfunction PokedexEntry({\n  hidden,\n  isCaught,\n  inputHandler,\n  dexNumber,\n  dexName,\n  dexTypes\n}) {\n  const labelId = `${dexNumber}-${dexName}`;\n\n  const localInputHandler = e => {\n    inputHandler(e.target.attributes[\"data-value\"]);\n  };\n\n  return (\n    <div className={`pokedex-entry ${isCaught ? 'pokedex-entry--caught' : ''} ${hidden ? \"pokedex-entry--hidden\" : \"\"}`}>\n      <div className=\"pokedex-entry__box pokedex-entry__box--label\">\n        <CheckboxInput\n          value={dexNumber}\n          id={labelId}\n          defaultChecked={isCaught}\n          onChangeHandler={localInputHandler}\n        />\n        {dexNumber}\n      </div>\n      <div className=\"pokedex-entry__item pokedex-entry__item--box\">\n        <label htmlFor={labelId}>{dexName}</label>\n      </div>\n      <div className=\"pokedex-entry__item\">\n        <div className=\"pokedex-entry__box\">\n          {dexTypes.map(type => {\n            return <div key={type}>{type}</div>;\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(PokedexEntry);\n","import React from \"react\";\n\nimport PokedexEntry from \"../pokedex-entry\";\n\nimport \"./pokedex-tracker.css\";\n\nfunction PokedexTracker({\n  data,\n  filterType,\n  searchQuery,\n  currentCaughtPokemon,\n  inputHandler\n}) {\n  return (\n    <div className=\"pokedex-tracker\">\n      {data.map(pokemon => {\n        const isCaught = currentCaughtPokemon.includes(pokemon.dexNumber);\n\n        const currentItemVisible =\n          filterType === \"all\" ||\n          (filterType === \"caught\" && isCaught) ||\n          (filterType === \"uncaught\" && !isCaught);\n\n        const isSearchValid = pokemon.dexName.includes(searchQuery);\n\n        return (\n          currentItemVisible && (\n            <PokedexEntry\n              hidden={!isSearchValid}\n              key={pokemon.dexNumber}\n              isCaught={isCaught}\n              inputHandler={inputHandler}\n              dexNumber={pokemon.dexNumber}\n              dexName={pokemon.dexName}\n              dexTypes={pokemon.dexTypes}\n            />\n          )\n        );\n      })}\n    </div>\n  );\n}\n\nexport default PokedexTracker;\n","import React from 'react';\n\nfunction InputLabel({ id, value, inputHandler }) {\n  return (\n    <React.Fragment>\n      <input\n        id={id}\n        type=\"radio\"\n        name=\"caught-type\"\n        value={value}\n        checked={value === id}\n        onChange={inputHandler}\n      />\n      <label htmlFor={id} style={{ textTransform: 'capitalise' }}>\n        {id}\n      </label>\n    </React.Fragment>\n  )\n}\n\nexport default InputLabel;\n","import { useState } from 'react';\n\n// Hook\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;","import React, { useState, useCallback } from \"react\";\n\nimport \"./App.css\";\n\nimport PokedexTracker from \"./components/pokedex-tracker\";\nimport InputLabel from './components/input-label';\n\nimport pokdexJson from \"./helpers/data.json\";\nimport useLocalStorage from \"./helpers/use-local-storage-hook\";\n\nconst defaultCaughtPokemonObject = [];\n\nfunction App() {\n  const [caughtPokemons, setCaughtPokemons] = useLocalStorage(\n    \"caughtPokemonObject\",\n    defaultCaughtPokemonObject\n  );\n\n  const pokemonInputHandler = useCallback(\n    currentNumber => {\n      const currentNumberValue = currentNumber.value;\n      const tempCaughtPokemons = [...caughtPokemons];\n      if (!tempCaughtPokemons.includes(currentNumber.value)) {\n        setCaughtPokemons([...tempCaughtPokemons, currentNumberValue]);\n      } else {\n        const foundArrayIndex = tempCaughtPokemons.indexOf(currentNumberValue);\n        if (foundArrayIndex > -1) {\n          tempCaughtPokemons.splice(foundArrayIndex, 1);\n        }\n        setCaughtPokemons([...tempCaughtPokemons]);\n      }\n    },\n    [caughtPokemons]\n  );\n  const [filterType, setFilterType] = useState(\"all\");\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const onChangeFilterHandler = e => {\n    const target = e.target;\n    setFilterType(target.id);\n  };\n\n  const searchInputHandler = (e) => {\n    const target = e.target.value;\n    setSearchQuery(target);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Pokedex Living Dex Tracker</header>\n      <main>\n        <div>\n          <input placeholder=\"Search for a pokemon\" type=\"text\" value={searchQuery} onChange={searchInputHandler} />\n          <InputLabel\n            id=\"all\"\n            value={filterType}\n            inputHandler={onChangeFilterHandler}\n          />\n          <InputLabel\n            id=\"caught\"\n            value={filterType}\n            inputHandler={onChangeFilterHandler}\n          />\n          <InputLabel\n            id=\"uncaught\"\n            value={filterType}\n            inputHandler={onChangeFilterHandler}\n          />\n        </div>\n        <PokedexTracker\n          searchQuery={searchQuery}\n          data={pokdexJson}\n          filterType={filterType}\n          currentCaughtPokemon={caughtPokemons}\n          inputHandler={pokemonInputHandler}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}