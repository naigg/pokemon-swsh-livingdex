{"version":3,"sources":["components/pokedex-tracker/index.js","helpers/use-local-storage-hook.js","App.js","serviceWorker.js","index.js"],"names":["PokedexTracker","data","filterType","currentCaughtPokemon","inputHandler","className","map","pokemon","labelId","dexNumber","dexName","isCaught","includes","key","data-value","id","defaultChecked","type","onChange","htmlFor","dexTypes","useLocalStorage","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","defaultCaughtPokemonObject","App","caughtPokemons","setCaughtPokemons","setFilterType","onChangeFilterHandler","e","target","name","checked","pokdexJson","currentNumber","attributes","currentNumberValue","tempCaughtPokemons","foundArrayIndex","indexOf","splice","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4hrCAgDeA,MA5Cf,YAKI,IAJFC,EAIC,EAJDA,KACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,qBACAC,EACC,EADDA,aAEA,OACE,yBAAKC,UAAU,mBACZJ,EAAKK,KAAI,SAAAC,GACR,IAAMC,EAAO,UAAMD,EAAQE,UAAd,YAA2BF,EAAQG,SAC1CC,EAAWR,EAAqBS,SAASL,EAAQE,WAOvD,OAJiB,QAAfP,GACgB,WAAfA,GAA2BS,GACZ,aAAfT,IAA8BS,IAI7B,yBAAKE,IAAKN,EAAQE,UAAWJ,UAAU,yBACrC,2BACES,aAAYP,EAAQE,UACpBM,GAAIP,EACJQ,eAAgBL,EAChBM,KAAK,WACLC,SAAUd,IAEZ,6BAAMG,EAAQE,WACd,6BACE,2BAAOU,QAASX,GAAUD,EAAQG,UAEpC,6BACGH,EAAQa,SAASd,KAAI,SAAAW,GACpB,OAAO,yBAAKJ,IAAKI,GAAOA,a,OCE3BI,MApCf,SAAyBR,EAAKS,GAAc,MAGJC,oBAAS,WAC7C,IAEE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQd,GAEzC,OAAOW,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAGP,OADAC,QAAQC,IAAIF,GACLR,MAZ+B,mBAGnCW,EAHmC,KAGtBC,EAHsB,KAiC1C,MAAO,CAACD,EAfS,SAAAE,GACf,IAEE,IAAMC,EACJD,aAAiBE,SAAWF,EAAMF,GAAeE,EAEnDD,EAAeE,GAEfX,OAAOC,aAAaY,QAAQzB,EAAKe,KAAKW,UAAUH,IAChD,MAAON,GAEPC,QAAQC,IAAIF,OCxBZU,EAA6B,GAwEpBC,MAtEf,WAAgB,IAAD,EAC+BpB,EAC1C,sBACAmB,GAHW,mBACNE,EADM,KACUC,EADV,OAmBuBpB,mBAAS,OAnBhC,mBAmBNrB,EAnBM,KAmBM0C,EAnBN,KAqBPC,EAAwB,SAAAC,GAC5B,IAAMC,EAASD,EAAEC,OACjBH,EAAcG,EAAOhC,KAGvB,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAAlB,8BACA,8BACE,6BACE,2BACEU,GAAG,MACHE,KAAK,QACL+B,KAAK,cACLb,MAAOjC,EACP+C,QAAwB,QAAf/C,EACTgB,SAAU2B,IAEZ,2BAAO1B,QAAQ,OAAf,OACA,2BACEJ,GAAG,SACHE,KAAK,QACL+B,KAAK,cACLb,MAAOjC,EACP+C,QAAwB,WAAf/C,EACTgB,SAAU2B,IAEZ,2BAAO1B,QAAQ,UAAf,UACA,2BACEJ,GAAG,WACHE,KAAK,QACL+B,KAAK,cACLb,MAAOjC,EACP+C,QAAwB,aAAf/C,EACTgB,SAAU2B,IAEZ,2BAAO1B,QAAQ,YAAf,aAEF,kBAAC,EAAD,CACElB,KAAMiD,EACNhD,WAAYA,EACZC,qBAAsBuC,EACtBtC,aA1DoB,SAAA0C,GAC1B,IAAMK,EAAgBL,EAAEC,OAAOK,WAAW,cACpCC,EAAqBF,EAAchB,MACnCmB,EAAkB,YAAOZ,GAC/B,GAAKY,EAAmB1C,SAASuC,EAAchB,OAExC,CACL,IAAMoB,EAAkBD,EAAmBE,QAAQH,GAC/CE,GAAmB,GACrBD,EAAmBG,OAAOF,EAAiB,GAE7CZ,EAAkB,YAAIW,SANtBX,EAAkB,GAAD,mBAAKW,GAAL,CAAyBD,WCR5BK,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.85a0f466.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./pokedex-tracker.css\";\n\nfunction PokedexTracker({\n  data,\n  filterType,\n  currentCaughtPokemon,\n  inputHandler\n}) {\n  return (\n    <div className=\"pokedex-tracker\">\n      {data.map(pokemon => {\n        const labelId = `${pokemon.dexNumber}-${pokemon.dexName}`;\n        const isCaught = currentCaughtPokemon.includes(pokemon.dexNumber);\n\n        const currentItemVisible =\n          filterType === \"all\" ||\n          (filterType === \"caught\" && isCaught) ||\n          (filterType === \"uncaught\" && !isCaught);\n\n        return (\n          currentItemVisible && (\n            <div key={pokemon.dexNumber} className=\"pokedex-tracker__item\">\n              <input\n                data-value={pokemon.dexNumber}\n                id={labelId}\n                defaultChecked={isCaught}\n                type=\"checkbox\"\n                onChange={inputHandler}\n              />\n              <div>{pokemon.dexNumber}</div>\n              <div>\n                <label htmlFor={labelId}>{pokemon.dexName}</label>\n              </div>\n              <div>\n                {pokemon.dexTypes.map(type => {\n                  return <div key={type}>{type}</div>;\n                })}\n              </div>\n            </div>\n          )\n        );\n      })}\n    </div>\n  );\n}\n\nexport default PokedexTracker;\n","import { useState } from 'react';\n\n// Hook\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport PokedexTracker from \"./components/pokedex-tracker\";\n\nimport pokdexJson from \"./helpers/data.json\";\nimport useLocalStorage from \"./helpers/use-local-storage-hook\";\n\nconst defaultCaughtPokemonObject = [];\n\nfunction App() {\n  const [caughtPokemons, setCaughtPokemons] = useLocalStorage(\n    \"caughtPokemonObject\",\n    defaultCaughtPokemonObject\n  );\n  const pokemonInputHandler = e => {\n    const currentNumber = e.target.attributes[\"data-value\"];\n    const currentNumberValue = currentNumber.value;\n    const tempCaughtPokemons = [...caughtPokemons];\n    if (!tempCaughtPokemons.includes(currentNumber.value)) {\n      setCaughtPokemons([...tempCaughtPokemons, currentNumberValue]);\n    } else {\n      const foundArrayIndex = tempCaughtPokemons.indexOf(currentNumberValue);\n      if (foundArrayIndex > -1) {\n        tempCaughtPokemons.splice(foundArrayIndex, 1);\n      }\n      setCaughtPokemons([...tempCaughtPokemons]);\n    }\n  };\n  const [filterType, setFilterType] = useState(\"all\");\n\n  const onChangeFilterHandler = e => {\n    const target = e.target;\n    setFilterType(target.id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Pokedex Living Dex Tracker</header>\n      <main>\n        <div>\n          <input\n            id=\"all\"\n            type=\"radio\"\n            name=\"caught-type\"\n            value={filterType}\n            checked={filterType === \"all\"}\n            onChange={onChangeFilterHandler}\n          />\n          <label htmlFor=\"all\">All</label>\n          <input\n            id=\"caught\"\n            type=\"radio\"\n            name=\"caught-type\"\n            value={filterType}\n            checked={filterType === \"caught\"}\n            onChange={onChangeFilterHandler}\n          />\n          <label htmlFor=\"caught\">Caught</label>\n          <input\n            id=\"uncaught\"\n            type=\"radio\"\n            name=\"caught-type\"\n            value={filterType}\n            checked={filterType === \"uncaught\"}\n            onChange={onChangeFilterHandler}\n          />\n          <label htmlFor=\"uncaught\">Uncaught</label>\n        </div>\n        <PokedexTracker\n          data={pokdexJson}\n          filterType={filterType}\n          currentCaughtPokemon={caughtPokemons}\n          inputHandler={pokemonInputHandler}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}