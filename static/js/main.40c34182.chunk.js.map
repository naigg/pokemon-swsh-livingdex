{"version":3,"sources":["components/pokedex-tracker/index.js","helpers/use-local-storage-hook.js","App.js","serviceWorker.js","index.js"],"names":["PokedexTracker","data","currentCaughtPokemon","inputHandler","className","map","pokemon","labelId","dexNumber","dexName","key","data-value","id","defaultChecked","includes","type","onChange","htmlFor","dexTypes","useLocalStorage","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","defaultCaughtPokemonObject","App","caughtPokemons","setCaughtPokemons","pokdexJson","e","currentNumber","target","attributes","currentNumberValue","tempCaughtPokemons","foundArrayIndex","indexOf","splice","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4hrCA8CeA,MA1Cf,YAAuE,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,qBAAsBC,EAAgB,EAAhBA,aACpD,OACE,0BAAMC,UAAU,mBAEZH,EAAKI,KAAI,SAAAC,GACP,IAAMC,EAAO,UAAMD,EAAQE,UAAd,YAA2BF,EAAQG,SAChD,OACE,yBACEC,IAAKJ,EAAQE,UACbJ,UAAU,yBACV,2BACEO,aAAYL,EAAQE,UACpBI,GAAIL,EACJM,eAAgBX,EAAqBY,SAASR,EAAQE,WACtDO,KAAK,WACLC,SAAUb,IAEZ,6BAAMG,EAAQE,WACd,6BACE,2BAAOS,QAASV,GACbD,EAAQG,UAGb,6BAEIH,EAAQY,SAASb,KAAI,SAAAU,GACnB,OACE,yBAAKL,IAAKK,GACPA,a,OCOVI,MApCf,SAAyBT,EAAKU,GAAc,MAGJC,oBAAS,WAC7C,IAEE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQf,GAEzC,OAAOY,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAGP,OADAC,QAAQC,IAAIF,GACLR,MAZ+B,mBAGnCW,EAHmC,KAGtBC,EAHsB,KAiC1C,MAAO,CAACD,EAfS,SAAAE,GACf,IAEE,IAAMC,EACJD,aAAiBE,SAAWF,EAAMF,GAAeE,EAEnDD,EAAeE,GAEfX,OAAOC,aAAaY,QAAQ1B,EAAKgB,KAAKW,UAAUH,IAChD,MAAON,GAEPC,QAAQC,IAAIF,OCxBZU,EAA6B,GAiCpBC,MA/Bf,WAAgB,IAAD,EAC+BpB,EAAgB,sBAAuBmB,GADtE,mBACNE,EADM,KACUC,EADV,KAiBb,OACE,yBAAKrC,UAAU,OACb,4BAAQA,UAAU,cAAlB,8BAGA,kBAAC,EAAD,CACEH,KAAMyC,EACNxC,qBAAsBsC,EACtBrC,aAvBsB,SAACwC,GAC3B,IAAMC,EAAgBD,EAAEE,OAAOC,WAAW,cACpCC,EAAqBH,EAAcX,MACnCe,EAAkB,YAAOR,GAC/B,GAAKQ,EAAmBlC,SAAS8B,EAAcX,OAExC,CACL,IAAMgB,EAAkBD,EAAmBE,QAAQH,GAC/CE,GAAmB,GACrBD,EAAmBG,OAAOF,EAAiB,GAE7CR,EAAkB,YAAIO,SANtBP,EAAkB,GAAD,mBAAKO,GAAL,CAAyBD,UCL5BK,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.40c34182.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './pokedex-tracker.css';\r\n\r\nfunction PokedexTracker({ data, currentCaughtPokemon, inputHandler }) {\r\n  return (\r\n    <main className=\"pokedex-tracker\">\r\n      {\r\n        data.map(pokemon => {\r\n          const labelId = `${pokemon.dexNumber}-${pokemon.dexName}`;\r\n          return (\r\n            <div\r\n              key={pokemon.dexNumber}\r\n              className=\"pokedex-tracker__item\">\r\n              <input\r\n                data-value={pokemon.dexNumber}\r\n                id={labelId}\r\n                defaultChecked={currentCaughtPokemon.includes(pokemon.dexNumber)}\r\n                type=\"checkbox\"\r\n                onChange={inputHandler}\r\n              />\r\n              <div>{pokemon.dexNumber}</div>\r\n              <div>\r\n                <label htmlFor={labelId}>\r\n                  {pokemon.dexName}\r\n                </label>\r\n              </div>\r\n              <div>\r\n                {\r\n                  pokemon.dexTypes.map(type => {\r\n                    return (\r\n                      <div key={type}>\r\n                        {type}\r\n                      </div>\r\n                    )\r\n                  })\r\n                }\r\n              </div>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default PokedexTracker;","import { useState } from 'react';\r\n\r\n// Hook\r\nfunction useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;","import React from 'react';\nimport './App.css';\n\nimport PokedexTracker from './components/pokedex-tracker'\n\nimport pokdexJson from './helpers/data.json';\nimport useLocalStorage from './helpers/use-local-storage-hook';\n\nconst defaultCaughtPokemonObject = [];\n\nfunction App() {\n  const [caughtPokemons, setCaughtPokemons] = useLocalStorage('caughtPokemonObject', defaultCaughtPokemonObject);\n  const pokemonInputHandler = (e) => {\n    const currentNumber = e.target.attributes['data-value'];\n    const currentNumberValue = currentNumber.value;\n    const tempCaughtPokemons = [...caughtPokemons];\n    if (!tempCaughtPokemons.includes(currentNumber.value)) {\n      setCaughtPokemons([...tempCaughtPokemons, currentNumberValue]);\n    } else {\n      const foundArrayIndex = tempCaughtPokemons.indexOf(currentNumberValue);\n      if (foundArrayIndex > -1) {\n        tempCaughtPokemons.splice(foundArrayIndex, 1);\n      }\n      setCaughtPokemons([...tempCaughtPokemons]);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Pokedex Living Dex Tracker\n      </header>\n      <PokedexTracker\n        data={pokdexJson}\n        currentCaughtPokemon={caughtPokemons}\n        inputHandler={pokemonInputHandler}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}